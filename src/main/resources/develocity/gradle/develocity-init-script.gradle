import org.gradle.util.GradleVersion

// note that there is no mechanism to share code between the initscript{} block and the main script, so some logic is duplicated

// conditionally apply the Develocity / Build Scan plugin to the classpath so it can be applied to the build further down in this script
initscript {
    def isTopLevelBuild = !gradle.parent
    if (!isTopLevelBuild) {
        return
    }

    def getInputParam = { String name ->
        def envVarName = "bamboo_${name.toUpperCase().replace('.', '_').replace('-', '_')}"
        return System.getProperty(name) ?: System.getenv(envVarName)
    }

    def pluginRepositoryUrl = getInputParam('develocity-plugin.gradle.plugin-repository.url')
    def pluginRepositoryUsername = getInputParam('develocity-plugin.gradle.plugin-repository.username')
    def pluginRepositoryPassword = getInputParam('develocity-plugin.gradle.plugin-repository.password')
    def develocityPluginVersion = getInputParam('develocity-plugin.develocity.plugin.version')
    def ccudPluginVersion = getInputParam('develocity-plugin.ccud.plugin.version')

    def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
    def atLeastGradle4 = GradleVersion.current() >= GradleVersion.version('4.0')

    if (develocityPluginVersion || ccudPluginVersion && atLeastGradle4) {
        pluginRepositoryUrl = pluginRepositoryUrl ?: 'https://plugins.gradle.org/m2'
        logger.lifecycle("Develocity plugins resolution: $pluginRepositoryUrl")

        repositories {
            maven {
                url pluginRepositoryUrl
                if (pluginRepositoryUsername && pluginRepositoryPassword) {
                    logger.lifecycle("Using credentials for plugin repository")
                    credentials {
                        username(pluginRepositoryUsername)
                        password(pluginRepositoryPassword)
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
    }

    dependencies {
        if (develocityPluginVersion) {
            if (atLeastGradle5) {
                if (GradleVersion.version(develocityPluginVersion).baseVersion >= GradleVersion.version("3.17")) {
                    classpath "com.gradle:develocity-gradle-plugin:$develocityPluginVersion"
                } else {
                    classpath "com.gradle:gradle-enterprise-gradle-plugin:$develocityPluginVersion"
                }
            } else {
                classpath "com.gradle:build-scan-plugin:1.16"
            }
        }

        if (ccudPluginVersion && atLeastGradle4) {
            classpath "com.gradle:common-custom-user-data-gradle-plugin:$ccudPluginVersion"
        }
    }
}

def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def DEVELOCITY_PLUGIN_ID = 'com.gradle.develocity'
def DEVELOCITY_PLUGIN_CLASS = 'com.gradle.develocity.agent.gradle.DevelocityPlugin'
def DEVELOCITY_CONFIGURATION_CLASS = 'com.gradle.develocity.agent.gradle.DevelocityConfiguration'

def SETTINGS_EXTENSION_CLASSES = [GRADLE_ENTERPRISE_EXTENSION_CLASS, DEVELOCITY_CONFIGURATION_CLASS]

def CI_AUTO_INJECTION_CUSTOM_VALUE_NAME = 'CI auto injection'
def CI_AUTO_INJECTION_CUSTOM_VALUE_VALUE = 'Bamboo'
def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

def isTopLevelBuild = !gradle.parent
if (!isTopLevelBuild) {
    return
}

def getInputParam = { String name ->
    def envVarName = "bamboo_${name.toUpperCase().replace('.', '_').replace('-', '_')}"
    return System.getProperty(name) ?: System.getenv(envVarName)
}

def develocityUrl = getInputParam('develocity-plugin.develocity.url')
def develocityAllowUntrustedServer = Boolean.parseBoolean(getInputParam('develocity-plugin.develocity.allow-untrusted-server'))
def develocityPluginVersion = getInputParam('develocity-plugin.develocity.plugin.version')
def ccudPluginVersion = getInputParam('develocity-plugin.ccud.plugin.version')

def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
def atLeastGradle4 = GradleVersion.current() >= GradleVersion.version('4.0')
def shouldApplyDevelocityPlugin = atLeastGradle5 && develocityPluginVersion && isAtLeast(develocityPluginVersion, '3.17')

def dvOrGe = { def dvValue, def geValue ->
    if (shouldApplyDevelocityPlugin) {
        return dvValue instanceof Closure<?> ? dvValue() : dvValue
    }
    return geValue instanceof Closure<?> ? geValue() : geValue
}

// finish early if configuration parameters passed in via system properties are not valid/supported
if (ccudPluginVersion && isNotAtLeast(ccudPluginVersion, '1.7')) {
    logger.warn("Common Custom User Data Gradle plugin must be at least 1.7. Configured version is $ccudPluginVersion.")
    return
}

// register buildScanPublished listener and optionally apply the Develocity / Build Scan plugin
if (GradleVersion.current() < GradleVersion.version('6.0')) {
    rootProject {
        buildscript.configurations.getByName("classpath").incoming.afterResolve { ResolvableDependencies incoming ->
            def resolutionResult = incoming.resolutionResult

            if (develocityPluginVersion) {
                def scanPluginComponent = resolutionResult.allComponents.find {
                    it.moduleVersion.with { group == "com.gradle" && ['build-scan-plugin', 'gradle-enterprise-gradle-plugin', 'develocity-gradle-plugin'].contains(name) }
                }
                if (!scanPluginComponent) {
                    def pluginClass = dvOrGe(DEVELOCITY_PLUGIN_CLASS, BUILD_SCAN_PLUGIN_CLASS)
                    logger.lifecycle("Applying $pluginClass via init script")
                    applyPluginExternally(pluginManager, pluginClass)
                    def rootExtension = dvOrGe(
                            { develocity },
                            { buildScan }
                    )
                    def buildScanExtension = dvOrGe(
                            { rootExtension.buildScan },
                            { rootExtension }
                    )
                    if (develocityUrl) {
                        logger.lifecycle("Connection to Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer")
                        rootExtension.server = develocityUrl
                        rootExtension.allowUntrustedServer = develocityAllowUntrustedServer
                    }
                    if (!shouldApplyDevelocityPlugin) {
                        // Develocity plugin publishes scans by default
                        buildScanExtension.publishAlways()
                    }
                    // uploadInBackground not available for build-scan-plugin 1.16
                    if (buildScanExtension.metaClass.respondsTo(buildScanExtension, 'setUploadInBackground', Boolean)) buildScanExtension.uploadInBackground = false
                    buildScanExtension.value CI_AUTO_INJECTION_CUSTOM_VALUE_NAME, CI_AUTO_INJECTION_CUSTOM_VALUE_VALUE
                }
            }

            if (ccudPluginVersion && atLeastGradle4) {
                def ccudPluginComponent = resolutionResult.allComponents.find {
                    it.moduleVersion.with { group == "com.gradle" && name == "common-custom-user-data-gradle-plugin" }
                }
                if (!ccudPluginComponent) {
                    logger.lifecycle("Applying $CCUD_PLUGIN_CLASS via init script")
                    pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
                }
            }
        }
    }
} else {
    gradle.settingsEvaluated { settings ->
        if (!settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID) && !settings.pluginManager.hasPlugin(DEVELOCITY_PLUGIN_ID)) {
            def pluginClass = dvOrGe(DEVELOCITY_PLUGIN_CLASS, GRADLE_ENTERPRISE_PLUGIN_CLASS)
            logger.lifecycle("Applying $pluginClass via init script")
            applyPluginExternally(settings.pluginManager, pluginClass)
            if (develocityUrl) {
                logger.lifecycle("Connection to Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer")
                eachDevelocitySettingsExtension(settings, SETTINGS_EXTENSION_CLASSES) { ext ->
                    ext.server = develocityUrl
                    ext.allowUntrustedServer = develocityAllowUntrustedServer
                }
            }

            eachDevelocitySettingsExtension(settings, SETTINGS_EXTENSION_CLASSES) { ext ->
                ext.buildScan.uploadInBackground = false
                ext.buildScan.value CI_AUTO_INJECTION_CUSTOM_VALUE_NAME, CI_AUTO_INJECTION_CUSTOM_VALUE_VALUE
            }

            eachDevelocitySettingsExtension(settings, [GRADLE_ENTERPRISE_EXTENSION_CLASS]) { ext ->
                ext.buildScan.publishAlways()
            }
        }

        if (ccudPluginVersion) {
            if (!settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
                logger.quiet("Applying $CCUD_PLUGIN_CLASS via init script")
                settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
            }
        }
    }
}

void applyPluginExternally(def pluginManager, String pluginClassName) {
    def externallyApplied = 'develocity.externally-applied'
    def externallyAppliedDeprecated = 'gradle.enterprise.externally-applied'
    def oldValue = System.getProperty(externallyApplied)
    def oldValueDeprecated = System.getProperty(externallyAppliedDeprecated)
    System.setProperty(externallyApplied, 'true')
    System.setProperty(externallyAppliedDeprecated, 'true')
    try {
        pluginManager.apply(initscript.classLoader.loadClass(pluginClassName))
    } finally {
        if (oldValue == null) {
            System.clearProperty(externallyApplied)
        } else {
            System.setProperty(externallyApplied, oldValue)
        }
        if (oldValueDeprecated == null) {
            System.clearProperty(externallyAppliedDeprecated)
        } else {
            System.setProperty(externallyAppliedDeprecated, oldValueDeprecated)
        }
    }
}

static def eachDevelocitySettingsExtension(def settings, List<String> publicTypes, def action) {
    settings.extensions.extensionsSchema.elements.findAll { publicTypes.contains(it.publicType.concreteClass.name) }
            .collect { settings[it.name] }
            .each(action)
}

static def extensionsWithPublicType(def container, String publicType) {
    container.extensions.extensionsSchema.elements.findAll { it.publicType.concreteClass.name == publicType }
}

static boolean isAtLeast(String versionUnderTest, String referenceVersion) {
    GradleVersion.version(versionUnderTest) >= GradleVersion.version(referenceVersion)
}

static boolean isNotAtLeast(String versionUnderTest, String referenceVersion) {
    !isAtLeast(versionUnderTest, referenceVersion)
}
